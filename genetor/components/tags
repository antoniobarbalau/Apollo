!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEFAULT_PARAMS	default_params.py	/^DEFAULT_PARAMS = {$/;"	v
argmax	basic.py	/^def argmax(input, **params):$/;"	f
argmax	components.py	/^def argmax(input, **params):$/;"	f
arsinh	hyperbolic.py	/^def arsinh(x):$/;"	f
avg_pool	components.py	/^def avg_pool(input, **params):$/;"	f
avg_pool	pooling.py	/^def avg_pool(input, **params):$/;"	f
batch_norm	basic.py	/^def batch_norm(input, **params):$/;"	f
batch_norm	components.py	/^def batch_norm(input, **params):$/;"	f
bypass_fire	components.py	/^def bypass_fire(input, **params):$/;"	f
bypass_fire	convolutions.py	/^def bypass_fire(input, **params):$/;"	f
caps	capsules.py	/^def caps(input, **params):$/;"	f
caps	components.py	/^def caps(input, **params):$/;"	f
caps_margin_loss	capsules.py	/^def caps_margin_loss(caps, **params):$/;"	f
caps_margin_loss	components.py	/^def caps_margin_loss(caps, **params):$/;"	f
caps_reconstruction	capsules.py	/^def caps_reconstruction(generated_caps, **params):$/;"	f
caps_reconstruction	components.py	/^def caps_reconstruction(generated_caps, **params):$/;"	f
concat	basic.py	/^def concat(input, **params):$/;"	f
concat	components.py	/^def concat(input, **params):$/;"	f
contrastive_center_loss	components.py	/^def contrastive_center_loss(input, **params):$/;"	f
contrastive_center_loss	losses.py	/^def contrastive_center_loss(input, **params):$/;"	f
conv	components.py	/^def conv(input, **params):$/;"	f
conv	convolutions.py	/^def conv(input, **params):$/;"	f
cross_entropy	components.py	/^def cross_entropy(input, **params):$/;"	f
cross_entropy	losses.py	/^def cross_entropy(input, **params):$/;"	f
deconv_kernel	convolutions.py	/^def deconv_kernel(input, **params):$/;"	f
default_initialization	components.py	/^def default_initialization(shape):$/;"	f
default_initialization	initializations.py	/^def default_initialization(shape):$/;"	f
dilated_conv	components.py	/^def dilated_conv(input, **params):$/;"	f
dilated_conv	convolutions.py	/^def dilated_conv(input, **params):$/;"	f
dropout	basic.py	/^def dropout(input, **params):$/;"	f
dropout	components.py	/^def dropout(input, **params):$/;"	f
fc	basic.py	/^def fc(input, **params):$/;"	f
fc	components.py	/^def fc(input, **params):$/;"	f
fire	components.py	/^def fire(input, **params):$/;"	f
fire	convolutions.py	/^def fire(input, **params):$/;"	f
flatten	basic.py	/^def flatten(input, **params):$/;"	f
flatten	components.py	/^def flatten(input, **params):$/;"	f
gan_loss	losses.py	/^def gan_loss(input, **params):$/;"	f
gelu	activation_functions.py	/^def gelu(input, **params):$/;"	f
h_avg	hyperbolic.py	/^def h_avg(input, c = .05):$/;"	f
h_distance	hyperbolic.py	/^def h_distance(x, y):$/;"	f
h_exp	hyperbolic.py	/^def h_exp(c, x, input):$/;"	f
h_exp0	hyperbolic.py	/^def h_exp0(c, u):$/;"	f
h_exp_map	hyperbolic.py	/^def h_exp_map(input, **params):$/;"	f
h_lambda	hyperbolic.py	/^def h_lambda(c, x):$/;"	f
h_linear	hyperbolic.py	/^def h_linear(input, **params):$/;"	f
h_log	hyperbolic.py	/^def h_log(c, x, input):$/;"	f
h_matmul	hyperbolic.py	/^def h_matmul(c, M, x):$/;"	f
h_mlr	hyperbolic.py	/^def h_mlr(input, **params):$/;"	f
h_proto_loss	hyperbolic.py	/^def h_proto_loss(input, **params):$/;"	f
h_softmax	hyperbolic.py	/^def h_softmax(input, a, p, c):$/;"	f
input	basic.py	/^def input(input, **params):$/;"	f
input	components.py	/^def input(input, **params):$/;"	f
l2_loss	components.py	/^def l2_loss(input, **params):$/;"	f
l2_loss	losses.py	/^def l2_loss(input, **params):$/;"	f
mask_capsules_with_labels	capsules.py	/^def mask_capsules_with_labels(caps, **params):$/;"	f
mask_capsules_with_labels	components.py	/^def mask_capsules_with_labels(caps, **params):$/;"	f
max_pool	components.py	/^def max_pool(input, **params):$/;"	f
max_pool	pooling.py	/^def max_pool(input, **params):$/;"	f
mobius	hyperbolic.py	/^def mobius(f, c, input):$/;"	f
mobius_add	hyperbolic.py	/^def mobius_add(c, x, y):$/;"	f
mobius_add_batch	hyperbolic.py	/^def mobius_add_batch(c, x, y):$/;"	f
parse_image	components.py	/^def parse_image(shape):$/;"	f
parse_image	tf_data.py	/^def parse_image(shape):$/;"	f
parse_image_with_shape	components.py	/^def parse_image_with_shape(im, shape):$/;"	f
parse_image_with_shape	tf_data.py	/^def parse_image_with_shape(im, shape):$/;"	f
parse_sample	components.py	/^    def parse_sample(sample_proto):$/;"	f	function:tf_data
parse_sample	tf_data.py	/^    def parse_sample(sample_proto):$/;"	f	function:tf_data
prelu	activation_functions.py	/^def prelu(input, **params):$/;"	f
primary_caps	capsules.py	/^def primary_caps(input, **params):$/;"	f
primary_caps	components.py	/^def primary_caps(input, **params):$/;"	f
project	hyperbolic.py	/^def project(c, x):$/;"	f
proto_loss	losses.py	/^def proto_loss(input, **params):$/;"	f
reduce_max	basic.py	/^def reduce_max(input, **params):$/;"	f
reduce_max	components.py	/^def reduce_max(input, **params):$/;"	f
relu	basic.py	/^def relu(input, **params):$/;"	f
reshape	basic.py	/^def reshape(input, **params):$/;"	f
reshape	components.py	/^def reshape(input, **params):$/;"	f
resize_up_conv	components.py	/^def resize_up_conv(input, **params):$/;"	f
resize_up_conv	deconvolutions.py	/^def resize_up_conv(input, **params):$/;"	f
routing_by_agreement	capsules.py	/^def routing_by_agreement(input, predicted_output, **params):$/;"	f
routing_by_agreement	components.py	/^def routing_by_agreement(input, predicted_output, **params):$/;"	f
safe_norm	capsules.py	/^def safe_norm(input, axis = -1, epsilon = 1e-7, keep_dims = False, name = 'norm', keepdims = False):$/;"	f
safe_norm	components.py	/^def safe_norm(input, axis = -1, epsilon = 1e-7, keep_dims = False, name = 'norm'):$/;"	f
siamese_contrastive_loss	components.py	/^def siamese_contrastive_loss(input, **params): # not finalized$/;"	f
siamese_contrastive_loss	losses.py	/^def siamese_contrastive_loss(input, **params): # not finalized$/;"	f
siamese_margin_loss	components.py	/^def siamese_margin_loss(input, **params):$/;"	f
siamese_margin_loss	losses.py	/^def siamese_margin_loss(input, **params):$/;"	f
sigmoid	basic.py	/^def sigmoid(input, **params):$/;"	f
sigmoid	components.py	/^def sigmoid(input, **params):$/;"	f
skip	components.py	/^def skip(input, **params):$/;"	f
skip	convolutions.py	/^def skip(input, **params):$/;"	f
squash	capsules.py	/^def squash(input, axis = -1, epsilon = 1e-7, name = 'squashed'):$/;"	f
squash	components.py	/^def squash(input, axis = -1, epsilon = 1e-7, name = 'squashed'):$/;"	f
tf_data	components.py	/^def tf_data(input, **params):$/;"	f
tf_data	tf_data.py	/^def tf_data(input, **params):$/;"	f
to_poincare	hyperbolic.py	/^def to_poincare(input, **params):$/;"	f
to_tensor	basic.py	/^def to_tensor(input):$/;"	f
to_tensor	components.py	/^def to_tensor(input):$/;"	f
up_conv	components.py	/^def up_conv(input, **params):$/;"	f
up_conv	deconvolutions.py	/^def up_conv(input, **params):$/;"	f
upsampling	components.py	/^def upsampling(input, **params):$/;"	f
upsampling	deconvolutions.py	/^def upsampling(input, **params):$/;"	f
xavier_over_2	components.py	/^def xavier_over_2(shape, variable_type):$/;"	f
